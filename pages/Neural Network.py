import streamlit as st
import pathlib


def load_css(file_name: str) -> None:
    with open(file_name, "r") as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)


css_path = pathlib.Path("css/style.css")
if css_path.exists():
    load_css(css_path)
else:
    st.error(f"CSS file not found: {css_path.resolve()}")


st.title("Coffee Prediction")
st.subheader("Coffee Prediction ‡∏Ñ‡∏∑‡∏≠ ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡∏∞‡πÑ‡∏£ ?")
st.text("‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏´‡∏≤‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡πÅ‡∏ü arabica ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ú‡∏• ‡∏°‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏µ‡∏ï‡πâ‡∏ô‡∏Å‡∏≥‡πÄ‡∏´‡∏ô‡∏¥‡∏î‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏≠‡∏∞‡πÑ‡∏£")
st.image("https://i.pinimg.com/736x/41/45/88/414588b8651bfe51acbf2feeeb333f7f.jpg", width=300)
st.subheader("‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á Dataset ?")
st.markdown(
    "‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå Kaggle ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö ‡∏Ç‡πâ‡∏≠‡∏°‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏•‡πá‡∏î‡∏Å‡∏≤‡πÅ‡∏ü ‡∏≠‡∏≤‡∏£‡∏≤‡∏ö‡∏¥‡∏Å‡πâ‡∏≤ ‡πÇ‡∏î‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å CQI ‡πÉ‡∏ô ‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏° ‡∏õ‡∏µ 2023 ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡πÅ‡∏ü ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏î‡πâ‡∏≤‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏Å‡∏≤‡πÅ‡∏ü, ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏£‡∏£‡∏π‡∏õ, ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥ ‡∏ô‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡πÅ‡∏ü, ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏î‡∏¥‡∏ô, ‡πÅ‡∏•‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡πÅ‡∏ü [Kaggle](https://www.kaggle.com/datasets/fatihb/coffee-quality-data-cqi)")
st.subheader("Data Features ‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á ?")
st.markdown("**Aroma**: ‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏´‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡πÅ‡∏ü")
st.markdown("**Flavor**: ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡πÅ‡∏ü ‡πÄ‡∏ä‡πà‡∏ô ‡∏´‡∏ß‡∏≤‡∏ô, ‡∏Ç‡∏°, ‡πÄ‡∏õ‡∏£‡∏µ‡πâ‡∏¢‡∏ß ‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏£‡∏™‡∏≠‡∏∑‡πà‡∏ô ‡πÜ")
st.markdown("**Aftertaste**: ‡∏£‡∏™‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏î‡∏∑‡πà‡∏°‡∏Å‡∏≤‡πÅ‡∏ü")
st.markdown("**Acidity**: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡∏£‡∏µ‡πâ‡∏¢‡∏ß‡∏™‡∏î‡πÉ‡∏™‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡πÅ‡∏ü")
st.markdown("**Body**: ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡πÅ‡∏ü‡πÉ‡∏ô‡∏õ‡∏≤‡∏Å")
st.markdown("**Balance**: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡∏ï‡πà‡∏≤‡∏á ‡πÜ")
st.markdown("**Uniformity**: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠‡∏Ç‡∏≠‡∏á‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡∏ß")
st.markdown("**Clean Cup**: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏™‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°")
st.markdown("**Sweetness**: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏≤‡∏£‡∏≤‡πÄ‡∏°‡∏•, ‡∏ú‡∏•‡πÑ‡∏°‡πâ, ‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ")
st.markdown("**Total Cup Points**: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô")

st.subheader("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á")

st.text("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÅ‡∏£‡∏Å ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ‡∏°‡∏µ‡∏à‡∏∏‡∏î‡πÑ‡∏´‡∏ô‡∏õ‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏á‡πÑ‡∏õ ‡πÅ‡∏•‡πâ‡∏ß ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏°‡∏≤‡πÉ‡∏ä‡πâ ‡∏Å‡∏±‡∏ö ‡πÅ‡∏Å‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ mean ‡∏•‡∏á‡πÑ‡∏õ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πà‡∏Ñ‡πà‡∏≤ null ‡∏´‡∏£‡∏∑‡∏≠ Nan ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

code1 = '''
df = pd.read_csv("dataset/arabicadata.csv")
st.subheader("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

df = df[["Aroma", "Flavor", "Aftertaste", "Acidity", "Body", "Balance",
         "Uniformity", "Clean.Cup", "Sweetness", "Country.of.Origin"]]

numeric_cols = ["Aroma", "Flavor", "Aftertaste", "Acidity", "Body", "Balance",
                "Uniformity", "Clean.Cup", "Sweetness"]
imputer = SimpleImputer(strategy="mean")
df[numeric_cols] = imputer.fit_transform(df[numeric_cols])

st.dataframe(df.head())
'''

st.code(code1, language='python')

st.text("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î colum ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ô‡∏≥‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô ‡πÅ‡∏•‡∏∞ ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ ‡∏ñ‡∏±‡∏î‡∏°‡∏≤ ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ MinMaxScaler ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡πÄ‡∏ó‡∏£‡∏ô‡∏ô‡∏ô‡∏±‡πâ‡∏ô ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 0 - 1 ‡πÅ‡∏•‡∏∞ ‡∏ô‡∏≥‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏°‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ú‡∏∑‡πà‡∏≠ ‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡πÅ‡∏•‡∏∞ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ñ‡∏∑‡∏≠ ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

code2 = '''
country_col = df["Country.of.Origin"]

scaler = MinMaxScaler(feature_range=(0, 1))
scaled_features = scaler.fit_transform(df[numeric_cols])
scaled_df = pd.DataFrame(scaled_features, columns=numeric_cols)
scaled_df["Country.of.Origin"] = country_col.values

country = LabelEncoder()
country.fit(df["Country.of.Origin"])

st.subheader("‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
st.write(np.array(country.classes_).reshape(1, -1))
'''
st.code(code2, language='python')

st.text("‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ú‡∏° ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ó‡∏£‡∏ô ‡πÇ‡∏î‡∏¢ ‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£ ‡πÅ‡∏¢‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞ ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏°‡∏≤ ‡πÄ‡∏ó‡∏£‡∏ô ‡πÅ‡∏•‡∏∞ ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ‡πÅ‡∏•‡∏∞ ‡πÉ‡∏ä‡πâ StandardScaler ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°")

code3 = '''
usedata = df.drop(columns=["Country.of.Origin"])
finedata = df["Country.of.Origin"]

encoder = LabelEncoder()
finedata = encoder.fit_transform(finedata)

traindata, testdata, trantarget, testtarget = train_test_split(
    usedata, finedata, test_size=0.1, random_state=42)

imputer = SimpleImputer(strategy="mean")
traindata = imputer.fit_transform(traindata)

scaler = StandardScaler()
traindata = scaler.fit_transform(traindata)
'''
st.code(code3, language='python')

st.text("‡∏ï‡πà‡∏≠‡∏°‡∏≤‡∏ú‡∏°‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏∏‡∏Å‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡∏∞ ‡πÅ‡∏ö‡πà‡∏á ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô ‡∏Å‡∏±‡∏ö ‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏±‡∏ô ‡πÅ‡∏•‡∏∞ ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞‡∏ô‡∏≥‡πÑ‡∏õ ‡∏û‡∏±‡∏í‡∏ô‡∏≤")
code4 = '''
    encoder = LabelEncoder()
    finedata = encoder.fit_transform(finedata)

    traindata, testdata,trantarget, testtarget = train_test_split(usedata, finedata, test_size=0.3, random_state=42)

    imputer = SimpleImputer(strategy="mean")
    traindata = imputer.fit_transform(traindata)
    testdata = imputer.transform(testdata)

    scaler = StandardScaler()
    traindata = scaler.fit_transform(traindata)
    testdata = scaler.transform(testdata)
'''

st.code(code4, language='python')

st.text("‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏°‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ MLPClassifier ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• Neural Network ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ß‡πâ")

code5 = '''
model = MLPClassifier(hidden_layer_sizes=(128, 64, 32), activation="relu", solver="adam",
                      alpha=0.001, max_iter=100, random_state=42)
model.fit(traindata, trantarget)
'''

st.code(code5, language='python')

st.text("‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà ‡∏™‡∏£‡πâ‡∏≤‡∏á input ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏™‡πà‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô")

code6 = '''
    inputs = {}
for col in fetcol:
    inputs[col] = st.number_input(f"{col}", value=5.0, step=0.1)
'''
st.code(code6, language='python')

st.text("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏≤‡∏£‡πÉ‡∏™‡πà input ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡πá‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏´‡∏≤ ‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏•‡πá‡∏î‡∏Å‡∏≤‡πÅ‡∏ü‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô ‡πÇ‡∏î‡∏¢‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ input ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô array ‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ö‡∏≤‡∏á input ‡∏Å‡πá‡∏à‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢ SimpleImputer ‡πÅ‡∏•‡∏∞ ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡πÄ‡∏Å‡∏•‡∏Ç‡∏≠‡∏á input ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡∏ä‡∏∏‡∏î‡∏ù‡∏∂‡∏Å ‡πÅ‡∏•‡∏∞ ‡∏ï‡∏±‡∏ß‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ‡πÅ‡∏•‡∏∞ ‡∏´‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ó‡πå")

code7 = '''
  if st.button("üîé ‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡πÅ‡∏ü‡∏Å‡∏±‡∏ô"):
    progress_bar = st.progress(0)
    for percent in range(0, 101, 10):
        time.sleep(0.2)
        progress_bar.progress(percent)

    input = np.array([[inputs[col] for col in fetcol]])
    input = imputer.transform(input)
    input = scaler.transform(input)

    prediction_probs = model.predict_proba(input)[0]
    prediction = np.argmax(prediction_probs)

    country = encoder.inverse_transform([prediction])[0]
    confidence = prediction_probs[prediction] * 100

    st.success(f"‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡πÅ‡∏ü‡∏Ñ‡∏∑‡∏≠ : {country}")
    st.success(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏∑‡∏≠ : {confidence:.2f} %")

'''
st.code(code7, language='python')

st.markdown(
    """
    <a href="/Neural_Network_Model" style="text-decoration: none;">
        <div class="mainnaural">
            <h1 style="text-shadow: 2px 2px 5px black;">Go to the model</h1>
            <h3 style="text-shadow: 2px 2px 5px black; text-align: right;">Click me!</h3>
        </div>
    </a>
    """,
    unsafe_allow_html=True
)
